<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(TargetDir)SystemEx.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="SystemEx" #>
<#@ import namespace="VSIXEx" #>
<#@ import namespace="VSIXEx.Attributes" #>
<#@ parameter name="assembly" type="System.Reflection.Assembly" #>
  <Symbols>
<#
	if (this.assembly != null)
	{
		var idSymbols = this.assembly.EnumTypesWithAttribute<IDSymbolAttribute>();
		foreach (dynamic type in this.assembly.EnumTypesWithAttribute<GuidSymbolsAttribute>())
		{
			foreach (dynamic field in (type.Type as Type).EnumFieldsWithAttribute<GuidSymbolAttribute>(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static))
			{
				Guid guid = new Guid(field.Field.GetValue(null));
				string name = field.Attribute.Name != null ? field.Attribute.Name : field.Field.Name;
				var ids = from id in idSymbols where id.Attribute.Guid == guid select id;

				if (!ids.Any())
				{#>
    <GuidSymbol name="<#= name #>" value="<#= guid.ToString("B") #>" />
<#				}
				else
				{#>
    <GuidSymbol name="<#= name #>" value="<#= guid.ToString("B") #>">
<#				foreach (dynamic id in ids)
				{
					foreach (dynamic item in (id.Type as Type).EnumEnumValues())
					{#>
        <IDSymbol name="<#= item.Name #>" value="0x<#= item.Value.ToString("X") #>" />
<#					}
				}#>
    </GuidSymbol>
<#				}
			}
		}
	}
#>
  </Symbols>